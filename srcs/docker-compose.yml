services:
  nginx:
    depends_on:
      - frontend
    build:
      context: ./requirements/nginx
      dockerfile: Dockerfile
    ports:
      - "443:443/tcp"
    image: nginx:1.27.1
    container_name: nginx
    env_file: ./env/.env_nginx
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.2
    hostname: nginx
    volumes:
      - static_media:/static
      - static_service_chat:/static/chat
      - static_service_app:/static/api
      - static_live_chat:/static/live_chat
      - static_pong:/static/pong
      - static_users:/static/users

  frontend:
    depends_on:
      - service_app_django
      - service_chat_django
      - service_user_handler_django
      - service_game_pong_django
      - service_live_chat_django
    image: node:23.9.0-alpine3.20a@sha256:d328a006af9cd556fec56d3fb325ce8fdee988b511dfdfe90d3182bed900aecd
    container_name: frontend
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.3
    hostname: frontend
    volumes:
      - frontend_index:/home/frontend
      - frontend_package_lock:/home/frontend
      - frontend_package:/home/frontend
      - frontend_public:/home/frontend
      - frontend_src:/home/frontend
      - frontend_vite_config:/home/frontend
    command: >
      sh -c "apk update \
      && apk upgrade \
      && apk add vim \
      && npm install --prefix /home/frontend \
      && npm run build --prefix /home/frontend \
      && npx serve /home/frontend/dist"

  service_user_handler_django:
    depends_on:
      - service_user_handler_postgresql
      - vault
    build:
      context: ./requirements/service_user_handler/django
      dockerfile: Dockerfile
    image: python:3.13.0rc1_2
    container_name: service_user_handler_django
    env_file:
      - ./env/.env_nginx
      - ./env/.env_service_user_handler_django
      - ./env/.env_service_user_handler_postgres
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.40
    hostname: service_user_handler_django

  service_user_handler_postgresql:
    image: postgres@sha256:7b86711ac72674c8f2cf0fad7fd55cb07ae709c62fa0cddfa78e28e985fffe09
    container_name: service_user_handler_postgresql
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.41
    hostname: service_user_handler_postgresql
    env_file:
      - ./env/.env_service_user_handler_postgres
    volumes:
      - user_handler_postgres_data:/var/lib/postgresql/data
        #      - user_handler_postgres_init_01:/docker-entrypoint-initdb.d
        #      - user_handler_postgres_init_02:/docker-entrypoint-initdb.d
        #      - user_handler_postgres_init_03:/docker-entrypoint-initdb.d

  service_game_pong_django:
    depends_on:
      - service_game_pong_postgresql
      - vault
    build:
      context: ./requirements/service_game_pong/django
      dockerfile: Dockerfile
    image: python:3.13.0rc1_game_pong
    container_name: service_game_pong_django
    env_file:
      - ./env/.env_nginx
      - ./env/.env_service_game_pong_django
      - ./env/.env_service_game_pong_postgres
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.42
    hostname: service_game_pong_django

  service_game_pong_postgresql:
    image: postgres@sha256:7b86711ac72674c8f2cf0fad7fd55cb07ae709c62fa0cddfa78e28e985fffe09
    container_name: service_game_pong_postgresql
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.43
    hostname: service_game_pong_postgresql
    env_file:
      - ./env/.env_service_game_pong_postgres
    volumes:
      - game_pong_postgres_data:/var/lib/postgresql/data
        #      - game_pong_postgres_init_01:/docker-entrypoint-initdb.d
        #      - game_pong_postgres_init_02:/docker-entrypoint-initdb.d

  service_live_chat_django:
    depends_on:
      - service_live_chat_postgresql
      - vault
    build:
      context: ./requirements/service_live_chat/django
      dockerfile: Dockerfile
    image: python:3.13.0rc1_live_chat
    container_name: service_live_chat_django
    env_file:
      - ./env/.env_nginx
      - ./env/.env_service_live_chat_django
      - ./env/.env_service_live_chat_postgres
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.44
    hostname: service_live_chat_django

  service_live_chat_postgresql:
    image: postgres@sha256:7b86711ac72674c8f2cf0fad7fd55cb07ae709c62fa0cddfa78e28e985fffe09
    container_name: service_live_chat_postgresql
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.45
    hostname: service_live_chat_postgresql
    env_file:
      - ./env/.env_service_live_chat_postgres
    volumes:
      - live_chat_postgres_data:/var/lib/postgresql/data
        #      - live_chat_postgres_init_01:/docker-entrypoint-initdb.d
        #      - live_chat_postgres_init_02:/docker-entrypoint-initdb.d

  service_app_django:
    depends_on:
      - service_app_postgresql
      - vault
    build:
      context: ./requirements/service_app/django
      dockerfile: Dockerfile
    image: python:3.13.0rc1
    container_name: service_app_django
    env_file:
      - ./env/.env_nginx
      - ./env/.env_service_app_django
      - ./env/.env_service_app_postgres
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.4
    hostname: service_app_django

  service_app_postgresql:
    image: postgres@sha256:7b86711ac72674c8f2cf0fad7fd55cb07ae709c62fa0cddfa78e28e985fffe09
    container_name: service_app_postgresql
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.5
    hostname: service_app_postgresql
    env_file:
      - ./env/.env_service_app_postgres
    volumes:
      - service_app_postgres_hba:/etc/postgresql/data

  service_chat_django:
    depends_on:
      - service_chat_postgresql
      - vault
    build:
      context: ./requirements/service_chat/django
      dockerfile: Dockerfile
    image: python:3.13.0rc1_1
    container_name: service_chat_django
    env_file:
      - ./env/.env_nginx
      - ./env/.env_service_chat_django
      - ./env/.env_service_chat_postgres
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.6
    hostname: service_chat_django

  service_chat_postgresql:
    image: postgres@sha256:7b86711ac72674c8f2cf0fad7fd55cb07ae709c62fa0cddfa78e28e985fffe09
    container_name: service_chat_postgresql
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.7
    hostname: service_chat_postgresql
    env_file:
      - ./env/.env_service_chat_postgres
    volumes:
      - service_chat_postgres_hba:/var/lib/postgresql/data

  vault:
    depends_on:
      - vault_postgresql
      - vault_sealer
    image: hashicorp/vault@sha256:c51bb287709b74daefab32d1246cac767c32b8c73cb86509957634dffcd66a0e
    container_name: vault_secrets
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.9
    env_file: ./env/.env_vault
    hostname: vault
    volumes:
      - vault_config:/vault/config
    cap_add:
      - IPC_LOCK
    command: >
      sh -c "vault server -config=/vault/config/vault.hcl"

  vault_postgresql:
    image: postgres@sha256:7b86711ac72674c8f2cf0fad7fd55cb07ae709c62fa0cddfa78e28e985fffe09
    container_name: vault_postgresql
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.10
    hostname: vault_postgresql
    env_file:
      - ./env/.env_vault_postgres
    volumes:
      - vault_postgres_data:/var/lib/postgresql/data

  vault_sealer:
    image: hashicorp/vault@sha256:c51bb287709b74daefab32d1246cac767c32b8c73cb86509957634dffcd66a0e
    container_name: vault_sealer
    init: true
    restart: always
    networks:
      network:
        ipv4_address: 172.20.0.11
    env_file: ./env/.env_vault_sealer
    hostname: vault_sealer
    volumes:
      - vault_sealer_config:/vault/config
      - vault_sealer_file:/vault/file
    cap_add:
      - IPC_LOCK
    command: >
      sh -c "vault server -config=/vault/config/vault.hcl"

networks:
  network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24

volumes:
  static_service_chat:
  static_service_app:
  static_users:
  static_media:
  static_pong:
  static_live_chat:
  frontend_index:
  frontend_package_lock:
  frontend_package:
  frontend_public:
  frontend_src:
  frontend_vite_config:
  user_handler_postgres_data:
      #user_handler_postgres_init_01:
      #  user_handler_postgres_init_02:
      #user_handler_postgres_init_03:
  game_pong_postgres_data:
      #game_pong_postgres_init_01:
      #game_pong_postgres_init_02:
  live_chat_postgres_data:
      #  live_chat_postgres_init_01:
      #live_chat_postgres_init_02:
  service_app_postgres_hba:
  service_chat_postgres_hba:
  service_chat_postgres_conf:
  vault_config:
  vault_postgres_data:
  vault_sealer_config:
  vault_sealer_file:
